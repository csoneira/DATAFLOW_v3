name: LLM-Based Bug Scan

on:
  push:
    branches:
      - main
jobs:
  scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Restore LocalAI model cache
        id: cache-model
        uses: actions/cache@v3
        with:
          path: localai_models
          key: ${{ runner.os }}-localai-hermes-2-theta-llama-3-8b

      - name: Start LocalAI (with cached models)
        run: |
          # Pull the latest LocalAI image
          docker pull localai/localai:master-ffmpeg-core

          # Run LocalAI, mounting our cache directory
          docker run -d --name local-ai \
            -p 8080:8080 \
            -v ${{ github.workspace }}/localai_models:/usr/share/local-ai/models \
            -e MODELS_PATH=/usr/share/local-ai/models \
            -u $(id -u):$(id -g) \
            localai/localai:master-ffmpeg-core \
            run --debug hermes-2-theta-llama-3-8b

          # Wait until the container reports healthy
          until [ "$(docker inspect -f '{{.State.Health.Status}}' local-ai)" = "healthy" ]; do
            echo "Waiting for LocalAI to be ready…"
            sleep 2
          done
          
      - name: Run Bug Detector
        env:
          GH_BEFORE: ${{ github.event.before }}
        run: |
          set -e

          # 1. Compute the diff ------------------------------------------------------
          if git rev-parse HEAD~1 >/dev/null 2>&1; then
            BASE=HEAD~1
          else
            BASE=$GH_BEFORE
            git fetch --no-tags --no-recurse-submodules origin "$BASE"
          fi
          echo "Comparing $BASE → HEAD"
          DIFF="$(git diff "$BASE" HEAD)"

          # 2. Craft a high-specificity prompt -----------------------------------------
          PROMPT=$(cat <<'EOF'
          Task: The unified diff below shows the changes in this commit.

          Produce a concise bullet list of bugs.  
          • For each bug, output exactly one line:  
            <file>:<line> — <bug description>

          Guidelines:
          1. Report only issues that would cause incorrect behaviour, crashes, data loss, or security vulnerabilities.  
          2. Ignore style, performance micro-optimisations, or “possible”/“potential” issues.  
          3. If no definite bugs are present, respond with the single line:  
            No bugs detected.

          Unified diff:
          EOF
          )

          # 3. Build the JSON payload -------------------------------------------------------------------------
          jq -R -s --arg prompt "$PROMPT" '{
            model: "hermes-2-theta-llama-3-8b",
            temperature: 0.2,   
            top_p: 0.95,       
            max_tokens: 512,
            messages: [
              { role: "system",
                content: "You are a senior software engineer with deep expertise in code review and defect detection." },
              { role: "user",
                content: ($prompt + .)
              }
            ]
          }' <<<"$DIFF" > payload.json

          # 4. Query LocalAI and pretty-print the result -----------------------------    
          RESPONSE=$(curl -s -H "Content-Type: application/json" \
                --data @payload.json http://localhost:8080/v1/chat/completions)

          OUTPUT=$(echo "$RESPONSE" | jq -r '.choices[0].message.content')
          printf '%s\n' "$OUTPUT"     # keep the result visible in the log

          # 5. Fail the job if any bug lines are present ---------------------------------
          if ! printf '%s\n' "$OUTPUT" | grep -Eq '^[[:space:]]*No bugs detected\.[[:space:]]*$'; then
            echo "✗ One or more bugs were reported – failing the job."
            exit 1
          fi

          echo "✓ No bugs detected."